#!/bin/bash
set -e

DOTFILES_ROOT="`pwd`"
HOMEBREW_PKGS=(jj bottom duf)

info() {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user() {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files() {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles() {
  overwrite_all=false
  backup_all=false
  skip_all=false

  if [ ! -z "$CODESPACES" ]; then
    # Make this script non-interactive at the risk of erasing files
    overwrite_all=true
  fi

  info 'installing dotfiles'
  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`; do
    dest="$HOME/.`basename \"${source%.*}\"`"
    if [ -f $dest ] || [ -d $dest ]; then
      overwrite=false
      backup=false
      skip=false
      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action
        case "$action" in
          o) overwrite=true;;
          O) overwrite_all=true;;
          b) backup=true;;
          B) backup_all=true;;
          s) skip=true;;
          S) skip_all=true;;
          *) ;;
        esac
      fi
      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]; then
        rm -rf $dest
        success "removed $dest"
      fi
      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]; then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi
      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]; then
        link_files $source $dest
      else
        success "skipped $source"
      fi
    else
      link_files $source $dest
    fi
  done
}

install_vundle() {
  if [ ! -d ~/.vim/bundle/Vundle.vim ]; then
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  fi
  vim +PluginInstall +qall || true
  success "installed Vundle"
}

use_zsh() {
  sudo chsh "$(id -un)" --shell "/usr/bin/zsh"
  success "switched login shell to zsh"
}

install_omz() {
  if [ ! -d ~/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    success "installed Oh My Zsh"
  fi
}

install_omz_theme() {
  mkdir -p ~/.oh-my-zsh/themes
  ln -s $DOTFILES_ROOT/zsh/toby.zsh-theme ~/.oh-my-zsh/themes/toby.zsh-theme
}

install_homebrew() {
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$($HOME/.linuxbrew/bin/brew shellenv)"
  brew update --force
  for pkg in $HOMEBREW_PKGS; do
    brew install $pkg
  done
}

install_dependencies() {
  info 'installing dependencies'
  if [ ! -z "$CODESPACES" ]; then
    use_zsh
    install_omz
    install_omz_theme
    install_vundle
    install_homebrew
  fi
}

echo ''
install_dotfiles
install_dependencies
echo ''
echo '  All installed!'

